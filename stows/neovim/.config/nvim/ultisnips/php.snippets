snippet cb "Comment Block"
/*
|--------------------------------------------------------------------------
| $1
|--------------------------------------------------------------------------
*/$0
endsnippet

snippet t "$this"
$this$0
endsnippet

# # skip f for function
# snippet "\s([a-zA-Z0-9_]{2,})" "member expansion" r
# `!p
# if not snip.c:
#     snip.rv = ' $' + match.group(1)`
# endsnippet

snippet "\s;([a-zA-Z][a-zA-Z0-9]*)" "member expansion" r
`!p
if not snip.c:
    snip.rv = ' $' + match.group(1)`
endsnippet

snippet "\s;([a-zA-Z][a-zA-Z0-9]*)\." "member expansion" r
`!p
if not snip.c:
    snip.rv = ' $' + match.group(1) + '->'`
endsnippet

snippet "\s([a-zA-Z][a-zA-Z0-9]*)\." "member expansion" r
`!p
if not snip.c:
    snip.rv = ' $' + match.group(1) + '->'`
endsnippet

# snippet "\$([a-zA-Z][a-zA-Z0-9]*)\." "member expansion" rA
# `!p
# if not snip.c:
#     snip.rv = '$' + match.group(1) + '->'`
# endsnippet

snippet "^(\s*)\." "member expansion" r
`!p
if not snip.c:
    snip.rv = match.group(1) + '->'`$0
endsnippet

snippet "\)\." "member expansion" r
`!p
if not snip.c:
    snip.rv = ')->'`$0
endsnippet

snippet ", ([a-zA-Z_]{2,})" "member expansion" r
`!p
if not snip.c:
    snip.rv = ', $' + match.group(1)`$0
endsnippet

snippet "\(([a-zA-Z_]{2,})" "member expansion" r
`!p
if not snip.c:
    snip.rv = '($' + match.group(1)`$0
endsnippet

# snippet "(->[a-zA-Z0-9]+)\(([a-zA-Z])" "member expansion" rA
# `!p
# if not snip.c:
#     snip.rv = match.group(1) + '($' + match.group(2)`$0
# endsnippet

snippet "->([a-zA-Z][a-zA-Z0-9]*)" "->" r
`!p
if not snip.c:
    snip.rv = '->' + match.group(1)`($1)$0
endsnippet

snippet "\b(\$?[a-zA-Z_][a-zA-Z0-9_]*)\.([a-zA-Z0-9_]+)" "complete" r
`!p
if not snip.c:
    snip.rv = match.group(1) + '->' + match.group(2)`$0
endsnippet

snippet "\)\.([a-zA-Z0-9_]+)" "complete" r
`!p
if not snip.c:
    snip.rv = ")" + '->' + match.group(1)`$0
endsnippet

snippet "(\$|->)([a-zA-Z][_a-zA-Z0-9]*)\." "->" r
`!p
if not snip.c:
    snip.rv = match.group(1) + match.group(2) + '->'`
endsnippet

snippet fe "foreach"
foreach ($${2:$1s} as $${1:thing}) {
  $0
}
endsnippet

###########################################################################
# PHP Class Instance Variables
###########################################################################
snippet prov "Protected: variable"
protected $$1;$0
endsnippet

###########################################################################
# PHP Functions
###########################################################################
snippet "\bf\b" "function" r
function($0) {
}
endsnippet

snippet pubf "public function"
public function ${1:name}($0) {
}
endsnippet

snippet prof "protected function"
protected function ${1:name}($0) {
}
endsnippet

snippet php "<?php"
<?php

$0
endsnippet
snippet psy "PsySh"
eval(\Psy\sh());
endsnippet

snippet mf "model factory"
$factory->define($0, function(Faker\Generator $faker) {
	return [
	];
});
endsnippet

################################################################################
#                      Laravel Relationships
################################################################################

snippet hm "HasMany"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\HasMany
 */
public function ${1:relation_name}() {
	return $this->hasMany('$3');
}
endsnippet

snippet mm "MorphMany"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphMany
 */
public function ${1:relation_name}() {
	return $this->morphMany('$3');
}
endsnippet

snippet mtm "MorphToMany"
/**
 * Get all of the $1 for the $3
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphToMany
 */
public function ${1:relation_name}() {
	return $this->morphToMany('$4', '$2');
}
endsnippet

snippet mo "MorphOne"
/**
 * Get the $1 for this $3
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphOne
 */
public function ${1:relation_name}() {
	return $this->morphOne('$4', '$2');
}
endsnippet

snippet mt "MorphTo"
/**
 * Get the owning $1 model
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphTo
 */
public function ${1:contract}() {
	return $this->morphTo();
}
endsnippet

snippet hmt "HasManyThrough"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\HasManyThrough
 */
public function ${1:relation_name}() {
	return $this->hasManyThrough('$3', '$4');
}
endsnippet

snippet mbm "MorphedByMany"
/**
 * Get all of the $1 that are assigned this $2
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphedByMany
 */
public function ${1:relation_name}() {
	return $this->morphedByMany('$4', '$3');
}
endsnippet

snippet bt "BelongsTo"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
 */
public function ${1:relation_name}() {
	return $this->belongsTo('$3');
}
endsnippet

snippet btm "BelongsToMany"
/**
 * Get the $1 for this $2.
 *
 * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
 */
public function ${1:relation_name}() {
	return $this->belongsToMany('$3');
}
endsnippet

################################################################################
#                      Laravel Models
################################################################################

snippet table "Table"
/**
 * The table for this type.
 *
 * @var string
 */
protected $table = '$1';$0
endsnippet

snippet guarded "guarded"
/**
 * The attributes that are not mass assignable.
 *
 * @var array
 */
protected $guarded= [
	'id',$0
];
endsnippet

snippet fil "Fillable"
/**
 * The attributes that are mass assignable.
 *
 * @var array
 */
protected $fillable = [
	'$0'
];
endsnippet

snippet hid "Hidden"
/**
 * The attributes that should be hidden for arrays.
 *
 * @var array
 */
protected $hidden = [
	$0
];
endsnippet

snippet dates "Dates"
/**
 * The date columns for this type.
 *
 * @var string[]
 */
protected $dates = [
	$0
];
endsnippet

snippet with "With"
/**
 * The relationships to eager load
 *
 * @var string[]
 */
protected $with = [$0];
endsnippet

snippet casts "Casts"
/**
 * The casts for this type.
 *
 * @var string[]
 */
protected $casts = [
	$0
];
endsnippet

snippet usd "use SoftDeletes"
use SoftDeletes$0;
endsnippet

snippet sc "query scope"
public function scope$1($query$0) {
  return $query->;
}
endsnippet

###########################################################################
# Fractal Transformers
###########################################################################

snippet frt "Fractal: Transformer"
<?php

namespace App\Http\Transformers;

use League\Fractal\TransformerAbstract;

class ${1:Something}Transformer extends TransformerAbstract {

	/**
	 * Turn this item object into a generic array
	 *
	 * @return array
	 */
	public function transform($0) {
		return [];
	}

}
endsnippet

snippet frai "Fractal: Available Includes"
/**
 * List of resources possible to include
 *
 * @var array
 */
protected $availableIncludes = [
  $0
];
endsnippet

snippet fri "Fractal: Include"
/**
 * Include $1
 *
 * @return \League\Fractal\ItemResource
 */
public function include${1:Resource}($0) {
}
endsnippet

###########################################################################
# Blueprint Methods
###########################################################################
snippet bps "blueprint: string"
$table->string('$1');$0
endsnippet

snippet bpin "blueprint: index"
$table->index('$1');$0
endsnippet

snippet bpui "Blueprint: unsigned integer"
$table->unsignedInteger('$1');$0
endsnippet

snippet bpd "Blueprint: date"
$table->date('$1');$0
endsnippet

snippet bpfk "Blueprint: Foreign Key"
$table->foreign('$1_id')->references('id')->on('$1s');$0
endsnippet

snippet bpfkc "Blueprint: Foreign Key (cascade)"
$table->foreign('$1_id')->references('id')->on('$1s')->onDelete('cascade');$0
endsnippet

snippet bpb "Blueprint: boolean"
$table->boolean('$1');$0
endsnippet

snippet bpdc "Blueprint: drop column"
$table->dropColumn('$1');$0
endsnippet

snippet bpsd "Blueprint: soft delete"
$table->softDeletes();
endsnippet

snippet bpts "Blueprint: timestamps"
$table->timestamps();
endsnippet

###########################################################################
# PHPUnit
###########################################################################
snippet unittc "PHPUnit: Test Case"
<?php

use Illuminate\Foundation\Testing\TestCase;


endsnippet

snippet setup "PHPUnit: setUp"
public function setUp() {
	$0
}
endsnippet
